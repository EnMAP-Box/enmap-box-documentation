
..
  ## AUTOGENERATED TITLE START

.. _Processing Algorithms:

Processing Algorithms
*********************

..
  ## AUTOGENERATED TITLE END

Usage
=====

QGIS Processing Toolbox
-----------------------

#. Open the Processing Toolbox: *Processing > Toolbox* or press Ctrl + Alt + T.

#. Search the name of the Algorithm in the search bar or scroll down and click on EnMAP-Box and a drop down of all algorithms will appear.

#. The dialog box will appear once you double-click on the algorithm you want to use.

#. Now fill the parameters, inputs and output locations and Click on run.

    .. figure:: ../img/gifs/QGIS_Toolbox.gif
       :align: center

QGIS Model Designer
-------------------

#. Open Model Designer: *Processing > Graphical Modeler* or press Ctrl + Alt + G.

#. Load your model in the it and to incorporate EnMAP-Box Algorithms click on the Algorithms tab.

#. Scroll down and click on EnMAP-Box from the list , drop down list with all the algorithms will appear.

#. Select and drag the algorithm you want into your model. A dialog box will appear, adjust the input and parameters according to your needs and click OK.

    .. figure:: ../img/gifs/QGIS_ModelDesigner.gif
       :align: center

QGIS Python Console
-------------------

#. QGIS installed (with EnMAP-Box plugin installed).

#. The EnMAP-Box plugin is activated (under Plugins > Manage and Install Plugins).

#. The processing module is imported.

    .. code-block:: batch

        import processing

#. You're familiar with the names of the algorithms or can find them using the command below.

    .. figure:: ../img/gifs/QGIS_PyConsole.gif
       :align: center

#. Once you know the algorithm ID (like enmapbox:build3dcube), you can get help like this:

    .. code-block:: batch

        processing.algorithmHelp("enmapbox:build3dcube")

#. Use the processing.run() function to run the algorithm:

    .. code-block:: batch

        processing.run("enmapbox:build3dcube", {
        'INPUT_LAYERS': ['layer1.tif', 'layer2.tif', 'layer3.tif'],
        'TEMPORAL_LABELS': ['2021-01', '2021-02', '2021-03'],
        'OUTPUT_CUBE': 'C:/Users/YourName/Documents/output_cube.tif'
        })

You need to adjust the parameters according to the algorithmâ€™s needs. Paths can be to files on disk or to in-memory layers.

Command Line Usage
------------------

``>qgis_process help enmapbox:Build3DCube``::

    ----------------
    Arguments
    ----------------

    raster: Raster layer with features
    	Argument type:	raster
    	Acceptable values:
    		- Path to a raster layer
    spectralScale: Spectral Scale (optional)
    	Default value:	1
    	Argument type:	number
    	Acceptable values:
    		- A numeric value
    		- field:FIELD_NAME to use a data defined value taken from the FIELD_NAME field
    		- expression:SOME EXPRESSION to use a data defined value calculated using a custom QGIS expression
    dx: Delta x (pixel) (optional)
    	Default value:	1
    	Argument type:	number
    	Acceptable values:
    		- A numeric value
    		- field:FIELD_NAME to use a data defined value taken from the FIELD_NAME field
    		- expression:SOME EXPRESSION to use a data defined value calculated using a custom QGIS expression
    dy: Delta y (pixel) (optional)
    	Default value:	1
    	Argument type:	number
    	Acceptable values:
    		- A numeric value
    		- field:FIELD_NAME to use a data defined value taken from the FIELD_NAME field
    		- expression:SOME EXPRESSION to use a data defined value calculated using a custom QGIS expression
    outputCubeFace: Output cube face
    	Argument type:	rasterDestination
    	Acceptable values:
    		- Path for new raster layer
    outputCubeSide: Output cube side
    	Argument type:	rasterDestination
    	Acceptable values:
    		- Path for new raster layer

    ----------------
    Outputs
    ----------------

    outputCubeFace: <outputRaster>
    	Output cube face
    outputCubeSide: <outputRaster>
    	Output cube side





Python Script (e.g. from PyCharm)
---------------------------------
Here is how you would use an algorithm from Python using the PyCharm IDE:

#. Setup a PyCharm Project and use the Python Interpreter that comes with QGIS.

    .. figure:: ../img/ProAlgo_PyCharm1.png
       :align: center

#. Include the installed EnMAP-Box Plugin as a Sources Root.

    .. figure:: ../img/ProAlgo_PyCharm2.png
       :align: center

#. Now you can use the EnMAP-Box API, i.e. enmapbox and enmapboxprocessing modules.

    .. figure:: ../img/ProAlgo_PyCharm3.png
       :align: center

Algorithms
==========

..
  ## AUTOGENERATED TOC START

.. toctree::
    :maxdepth: 1

    analysis_ready_data/index.rst
    auxilliary/index.rst
    classification/index.rst
    clustering/index.rst
    convolution__morphology_and_filtering/index.rst
    dataset_creation/index.rst
    export_data/index.rst
    feature_selection/index.rst
    import_data/index.rst
    masking/index.rst
    raster_analysis/index.rst
    raster_conversion/index.rst
    raster_miscellaneous/index.rst
    raster_projections/index.rst
    regression/index.rst
    spectral_library/index.rst
    spectral_resampling/index.rst
    transformation/index.rst
    unmixing/index.rst
    vector_conversion/index.rst
    vector_creation/index.rst


..
  ## AUTOGENERATED TOC END

