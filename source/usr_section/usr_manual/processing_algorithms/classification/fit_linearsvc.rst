..
  ## AUTOGENERATED START TITLE

.. _Fit LinearSVC:

Fit LinearSVC
*************


..
  ## AUTOGENERATED END TITLE

Here I can add manually defined title-related content.

..
  ## AUTOGENERATED START DESCRIPTION

Linear Support Vector <a href="https://enmap-box.readthedocs.io/en/latest/general/glossary.html#term-classification">Classification</a>. 
Similar to SVC with parameter kernel='linear', but implemented in terms of liblinear rather than libsvm, so it has more flexibility in the choice of penalties and loss functions and should scale better to large numbers of <a href="https://enmap-box.readthedocs.io/en/latest/general/glossary.html#term-sample">samples</a>. 
This <a href="https://enmap-box.readthedocs.io/en/latest/general/glossary.html#term-class">class</a> supports both dense and sparse input and the multiclass support is handled according to a one-vs-the-rest scheme.

..
  ## AUTOGENERATED END DESCRIPTION

Here I can add manually defined description-related content.

..
  ## AUTOGENERATED START PARAMETERS


:guilabel:`Classifier` [string]
    Scikit-learn python code. See <a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVC.html">LinearSVC</a>, <a href="http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html">GridSearchCV</a>, <a href="http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html">StandardScaler</a> for information on different parameters.
    Default::

        from sklearn.pipeline import make_pipeline
        from sklearn.model_selection import GridSearchCV
        from sklearn.preprocessing import StandardScaler
        from sklearn.svm import LinearSVC
        
        svc = LinearSVC(dual=True)
        param_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}
        tunedSVC = GridSearchCV(cv=3, estimator=svc, scoring='f1_macro', param_grid=param_grid)
        classifier = make_pipeline(StandardScaler(), tunedSVC)

:guilabel:`Training dataset` [file]
    <a href="https://enmap-box.readthedocs.io/en/latest/general/glossary.html#term-training-dataset">Training dataset</a> <a href="https://enmap-box.readthedocs.io/en/latest/general/glossary.html#term-pickle-file">pickle file</a> used for fitting the <a href="https://enmap-box.readthedocs.io/en/latest/general/glossary.html#term-classifier">classifier</a>. If not specified, an unfitted classifier is created.
**Outputs**


:guilabel:`Output classifier` [fileDestination]
    <a href="https://enmap-box.readthedocs.io/en/latest/general/glossary.html#term-pickle-file">Pickle file</a> destination.


..
  ## AUTOGENERATED END PARAMETERS

Here I can add manually defined parameters-related content.

..
  ## AUTOGENERATED START COMMAND USAGE

**Command-line usage**

``>qgis_process help enmapbox:FitLinearsvc``::

    ----------------
    Arguments
    ----------------
    
    classifier: Classifier
    	Default value:	from sklearn.pipeline import make_pipeline
    from sklearn.model_selection import GridSearchCV
    from sklearn.preprocessing import StandardScaler
    from sklearn.svm import LinearSVC
    
    svc = LinearSVC(dual=True)
    param_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}
    tunedSVC = GridSearchCV(cv=3, estimator=svc, scoring='f1_macro', param_grid=param_grid)
    classifier = make_pipeline(StandardScaler(), tunedSVC)
    	Argument type:	string
    	Acceptable values:
    		- String value
    		- field:FIELD_NAME to use a data defined value taken from the FIELD_NAME field
    		- expression:SOME EXPRESSION to use a data defined value calculated using a custom QGIS expression
    dataset: Training dataset (optional)
    	Argument type:	file
    	Acceptable values:
    		- Path to a file
    outputClassifier: Output classifier
    	Argument type:	fileDestination
    	Acceptable values:
    		- Path for new file
    
    ----------------
    Outputs
    ----------------
    
    outputClassifier: <outputFile>
    	Output classifier
    
    

..
  ## AUTOGENERATED END COMMAND USAGE
